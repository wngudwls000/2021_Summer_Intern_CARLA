// Generated by gencpp from file laser_sim_msg/point_cloud.msg
// DO NOT EDIT!


#ifndef LASER_SIM_MSG_MESSAGE_POINT_CLOUD_H
#define LASER_SIM_MSG_MESSAGE_POINT_CLOUD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_sim_msg
{
template <class ContainerAllocator>
struct point_cloud_
{
  typedef point_cloud_<ContainerAllocator> Type;

  point_cloud_()
    : ranges()
    , size(0)
    , channel(0)  {
    }
  point_cloud_(const ContainerAllocator& _alloc)
    : ranges(_alloc)
    , size(0)
    , channel(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ranges_type;
  _ranges_type ranges;

   typedef uint32_t _size_type;
  _size_type size;

   typedef uint32_t _channel_type;
  _channel_type channel;





  typedef boost::shared_ptr< ::laser_sim_msg::point_cloud_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_sim_msg::point_cloud_<ContainerAllocator> const> ConstPtr;

}; // struct point_cloud_

typedef ::laser_sim_msg::point_cloud_<std::allocator<void> > point_cloud;

typedef boost::shared_ptr< ::laser_sim_msg::point_cloud > point_cloudPtr;
typedef boost::shared_ptr< ::laser_sim_msg::point_cloud const> point_cloudConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_sim_msg::point_cloud_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_sim_msg::point_cloud_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laser_sim_msg::point_cloud_<ContainerAllocator1> & lhs, const ::laser_sim_msg::point_cloud_<ContainerAllocator2> & rhs)
{
  return lhs.ranges == rhs.ranges &&
    lhs.size == rhs.size &&
    lhs.channel == rhs.channel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laser_sim_msg::point_cloud_<ContainerAllocator1> & lhs, const ::laser_sim_msg::point_cloud_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laser_sim_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_sim_msg::point_cloud_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_sim_msg::point_cloud_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_sim_msg::point_cloud_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c9f5b31aed2b325faeea7a6697b7f64";
  }

  static const char* value(const ::laser_sim_msg::point_cloud_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c9f5b31aed2b325ULL;
  static const uint64_t static_value2 = 0xfaeea7a6697b7f64ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_sim_msg/point_cloud";
  }

  static const char* value(const ::laser_sim_msg::point_cloud_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] ranges\n"
"uint32 size\n"
"uint32 channel\n"
;
  }

  static const char* value(const ::laser_sim_msg::point_cloud_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ranges);
      stream.next(m.size);
      stream.next(m.channel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_cloud_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_sim_msg::point_cloud_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_sim_msg::point_cloud_<ContainerAllocator>& v)
  {
    s << indent << "ranges[]" << std::endl;
    for (size_t i = 0; i < v.ranges.size(); ++i)
    {
      s << indent << "  ranges[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ranges[i]);
    }
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
    s << indent << "channel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.channel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_SIM_MSG_MESSAGE_POINT_CLOUD_H
