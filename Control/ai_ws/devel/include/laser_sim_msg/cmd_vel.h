// Generated by gencpp from file laser_sim_msg/cmd_vel.msg
// DO NOT EDIT!


#ifndef LASER_SIM_MSG_MESSAGE_CMD_VEL_H
#define LASER_SIM_MSG_MESSAGE_CMD_VEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_sim_msg
{
template <class ContainerAllocator>
struct cmd_vel_
{
  typedef cmd_vel_<ContainerAllocator> Type;

  cmd_vel_()
    : steering_vel(0)
    , accel_vel(0)  {
    }
  cmd_vel_(const ContainerAllocator& _alloc)
    : steering_vel(0)
    , accel_vel(0)  {
  (void)_alloc;
    }



   typedef int32_t _steering_vel_type;
  _steering_vel_type steering_vel;

   typedef int32_t _accel_vel_type;
  _accel_vel_type accel_vel;





  typedef boost::shared_ptr< ::laser_sim_msg::cmd_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_sim_msg::cmd_vel_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_vel_

typedef ::laser_sim_msg::cmd_vel_<std::allocator<void> > cmd_vel;

typedef boost::shared_ptr< ::laser_sim_msg::cmd_vel > cmd_velPtr;
typedef boost::shared_ptr< ::laser_sim_msg::cmd_vel const> cmd_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_sim_msg::cmd_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laser_sim_msg::cmd_vel_<ContainerAllocator1> & lhs, const ::laser_sim_msg::cmd_vel_<ContainerAllocator2> & rhs)
{
  return lhs.steering_vel == rhs.steering_vel &&
    lhs.accel_vel == rhs.accel_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laser_sim_msg::cmd_vel_<ContainerAllocator1> & lhs, const ::laser_sim_msg::cmd_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laser_sim_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_sim_msg::cmd_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_sim_msg::cmd_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_sim_msg::cmd_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc66927a56ea8ece1366e10349e9d514";
  }

  static const char* value(const ::laser_sim_msg::cmd_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc66927a56ea8eceULL;
  static const uint64_t static_value2 = 0x1366e10349e9d514ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_sim_msg/cmd_vel";
  }

  static const char* value(const ::laser_sim_msg::cmd_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 steering_vel\n"
"int32 accel_vel\n"
;
  }

  static const char* value(const ::laser_sim_msg::cmd_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_vel);
      stream.next(m.accel_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_sim_msg::cmd_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_sim_msg::cmd_vel_<ContainerAllocator>& v)
  {
    s << indent << "steering_vel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steering_vel);
    s << indent << "accel_vel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.accel_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_SIM_MSG_MESSAGE_CMD_VEL_H
